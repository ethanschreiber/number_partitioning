from __future__ import print_function
import sys
import ProcessExperimentsLibrary  # Import Library
lib = ProcessExperimentsLibrary   # Give short name
from optparse import OptionParser

def latexTableHeader(minK, maxK) :
    # Setup tabular
    s = "\\begin{tabular}{r"       # \begin{tabular}{r
    for K in range (minK,maxK+1) :      #
        s += "|r"      # print |r for each name
    
    s += "} \\toprule\n"             # }\\ \hline finish line

    # print the first row of header k || 2-way || 3-way ...|
    s += "$n \downarrow$ $k \\rightarrow$ "
    for K in range (minK,maxK+1) :
        s += "& " + str(K) + "-Way"

    s += "\\\\ \\midrule"       
 
    return s


    
# Read from Command line
parser = OptionParser()
parser.add_option("-k", "--minK"  , dest="minK"          ,help="(Required) Min K to process", metavar="int")
parser.add_option("-K", "--maxK"  , dest="maxK"          ,help="(Required) Max K to process", metavar="int")
parser.add_option("-n", "--minN"  , dest="minN"          ,help="(Required) Min N to process", metavar="int")
parser.add_option("-N", "--maxN"  , dest="maxN"          ,help="(Required) Max N to process", metavar="int")
parser.add_option("-x", "--numExp", dest="numExperiments",help="(Required) Num experiments to process", metavar="int")
parser.add_option("-f", "--file"  , dest="filename"      ,help="(Required) Filename to write to", metavar="str")
parser.add_option( "--alg1"       , dest="alg1"          ,help="(Required) Algorithm 1", metavar="str")
parser.add_option( "--alg1Header" , dest="alg1Header"    ,help="(Required) Algorithm 1 Header", metavar="str")


(options, args) = parser.parse_args()

if (options.minK == None or options.maxK == None or 
    options.minN == None or options.maxN == None or 
    options.numExperiments == None or options.filename == None or
    options.alg1 == None or options.alg1Header == None) :    
    parser.print_help()
    print ("\n *** Error: Missing required parameters ***\n")
    sys.exit(0)

minK           = int(options.minK)
maxK           = int(options.maxK)
minN           = int(options.minN)
maxN           = int(options.maxN)
numExperiments = int(options.numExperiments)
filename       = options.filename
alg1           = options.alg1
alg1Header     = options.alg1Header

# Make sure parameters are entered
print ("Min K        : " + str(minK))
print ("Max K        : " + str(maxK))
print ("Min N        : " + str(minN))
print ("Max N        : " + str(maxN))
print ("# Experiments: " + str(numExperiments))
print ("Out Filename : " + filename)

outFile = open(filename,"w")

print(latexTableHeader(minK,maxK),file=outFile)

# Data
for N in range (minN,maxN+1) :
    if (N % 2 == 0) :
        print ("\\rowcolor{Gray}",file=outFile,end='');
    print (N,file=outFile,end=''),
    for K in range (minK,maxK+1) :
        print(lib.filename(K,N,alg1,numExperiments))
        count0 = lib.countLines(lib.filename(K,N,alg1,numExperiments))
        
        if (count0 > 0) :
            mem = lib.processExperiment(lib.filename(K,N,alg1,numExperiments),count0,6)/(2**20)
            print("& %s " % (lib.dataString(mem,count0,numExperiments)),file=outFile,end=''),
        else :
            print("& - ",file=outFile,end=''),
    print("\\\\",file=outFile)
print(lib.latexTableFooter(),file=outFile)

outFile.close()
