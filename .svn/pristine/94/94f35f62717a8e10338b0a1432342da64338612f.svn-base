/*
 * MoffittCachedIE.hpp
 *
 *  Created on: Sep 25, 2013
 *      Author: ethan
 */

#ifndef MOFFITTCACHEDIE_HPP_
#define MOFFITTCACHEDIE_HPP_

#include "../ss/SubsetSum.hpp"
#include "../ss/Schroeppel_Shamir.hpp"
#include <stdint.h>
#include <limits>
#include <iostream>

struct CachedIENode {

	CachedIENode *included;
	CachedIENode *excluded;
  uint8_t ieIdx;  // The index of the element to include/exclude


	CachedIENode() : included(NULL), excluded(NULL) {
	}
	CachedIENode(const uint8_t ieIdx) : ieIdx(ieIdx), included(NULL), excluded(NULL) {
	}

	CachedIENode(const uint8_t ieIdx, CachedIENode *included, CachedIENode *excluded) :
	  ieIdx(ieIdx), included(included), excluded(excluded) {

	}
};

class CachedIETree {
private :
  CachedIENode *m_root;
protected :
  void searchAll(CachedIENode *node);
public :
  CachedIETree();
~CachedIETree();

  void insert(vector<ss::SSSetNode> &v);
  void push_back(const ss::SSSetNode &node);
  void searchAll();
};


class MoffittCachedIE {
private:
  CachedIETree m_tree;
public:
	MoffittCachedIE(const vector<uint64_t> &S, uint64_t min, uint64_t max);
	void searchAll() {
	  m_tree.searchAll();
	}
};

#endif /* MOFFITTCACHEDIE_HPP_ */
