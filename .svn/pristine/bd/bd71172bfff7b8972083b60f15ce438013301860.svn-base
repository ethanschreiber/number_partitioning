/*
 * MoffittSS.hpp
 *
 *  Created on: Sep 19, 2013
 *      Author: ethan
 */

#ifndef MOFFITTSS_HPP_
#define MOFFITTSS_HPP_

#include "Moffitt.hpp"
#include "../ss/Schroeppel_Shamir.hpp"
#include <vector>
using std::vector;

namespace moffitt {
inline uint64_t setExcludedElements(vector<uint64_t> &excludedElements,
                                    const uint64_t S[], const size_t N,
                                    const ss::SSSetNode &currentSet) {
  uint64_t excludedElementsSum = 0;

  for (size_t i=0; i< N;i++) {
    if (!currentSet.set()[i]) {
      excludedElementsSum+=S[i];
      excludedElements.push_back(S[i]);
    }
  }

  return excludedElementsSum;
}

uint64_t schroeppelShamir(const int K,
                          uint64_t CMin, uint64_t CBest, uint64_t maxSoFar,
                          const vector<uint64_t> &S, const uint64_t SSum);

} // End Namespace


#endif /* MOFFITTSS_HPP_ */


//
//int leastSetIdx = m_n-1;            // Find the least significant bit set
//
//     while (!bitset[leastSetIdx]) {  // Assume at least 1 bit is set
//       leastSetIdx--;
//     }
//
//     for (int idx = 0;idx<=leastSetIdx;idx++) {
//       if (bitset[idx]) {
//         included.push_back(m_S[idx]);
//       } else {
//         excluded.push_back(m_S[idx]);
//       }
//     }
