/*
 * PartitionIterativeWeakening.cpp
 *
 *  Created on: Jul 31, 2013
 *      Author: ethan
 */


#include "PartitionIterativeWeakening.hpp"

namespace partition {



// ============================================================================
//
// P a r t i t i o n I t e r a t i v e W e a k e n i n g (PIW)
//
// ============================================================================
PIW::PartitionIterativeWeakening(const vector<uint64_t>& S, uint64_t elementsSum, int K, uint64_t upperBound, size_t numSets)
: Partition(S,K),
  m_cachedIETrees(new CachedIETreesAllCardinalitySS(S,K,upperBound,numSets)),
  m_cachedIE(new GenerateCachedIECardinality(this,S,m_cachedIETrees,elementsSum,K,upperBound, numSets))
{
}

PIW::~PartitionIterativeWeakening() {
	delete m_cachedIETrees;
	delete m_cachedIE;
}
// ----------------
// Search Functions
// ----------------
uint64_t PIW::partition(const int K,								// The idx of the current bin we are filling
										 ss::DynamicBitset &elements,		// Bitset with 1 representing elements still left
										 const uint64_t elementsSum,		// The sum of the elements still left
										 const size_t elementsCount,		// The count of the elements left (# of 1's in elements)
										 size_t cardinality,						// The cardinality of sets in the tree we are searching now
										 size_t firstIdx,								// The first idx we can include (in order to stop duplicate permutations)
										 uint64_t partialCost,					// The max sum used so far above this point in the tree
										 uint64_t ub) { 								// The best solution found so far

	d_binCounts[K]++;
	uint64_t currentValue;
  if (K==1) {                          							// If we have reached the last bin
  	currentValue = elementsSum;							  			// All elements must go in it
  } else if (!elements.any()) {        							// If there are no elements left (this should never happen)
    currentValue = 0;			                					// Then all remaining bins are empty and they have to fit
  } else {
    uint64_t lb = computeCMin(elementsSum,K,ub);		// Minimum value for remaining elements

    if (lb < ub) {
      currentValue = m_cachedIE->generate(K,elements,elementsSum, elementsCount,
      																	cardinality, firstIdx, lb, partialCost, ub);
    } else {
    	currentValue = ub;
    }
  }


  return std::max(partialCost,currentValue);
}


uint64_t PIW::partitionFirst(const int N,
                        const uint64_t elementsSum) {
  uint64_t currentValue=1;												// Keep going until we find a solution
  uint64_t firstSum = 0;													// With firstSum being the largest sum


  int tmpCount = 1;
  while (currentValue > firstSum) {							  // Keep going until we have found an optimal solution
  	m_cachedIE->resetCardinalityCounts();
  	SimpleTimer tmpTimer;

  	m_cachedIETrees->addSetsToCache();          	// Add necessary values to prefix tree

  	const ss::SetNodeBitset &setNode =								// The next set to consider for the first bin
    		*(m_cachedIETrees	->getMax());
    firstSum = setNode.sum();  										// The sum of this set


    m_firstCount++;
    ss::DynamicBitset elements = ~setNode.set();	// All that aren't used are left




    currentValue = partition(m_K-1,elements,elementsSum-firstSum, elements.count(),
															 m_cachedIETrees->getMinCardinality(), 0, firstSum, firstSum+1);  // Perform search

//    if (setNode.set().count() <= 5) {
//    	cout << std::setw(2) << tmpCount << ": " << tmpTimer.timeElapsed() << endl;
//    	tmpCount++;
//      cout << m_cachedIE->cardinalityCountsToString();
//      cout << "------------------------------------------------" << endl;
//    }

#if PAPER_DEBUG == 1
		const string CARD_TREES_FILENAME("/home/ethan/workspace/aaai14/card_trees.dot");
		cout << "---------------------" << endl
		     << "FC: " << getFirstCount() << endl
		     << "Writing " << CARD_TREES_FILENAME << endl
		     << "---------------------" << endl;
		std::ofstream cardTreesFile(CARD_TREES_FILENAME);
		cardTreesFile << m_cachedIE->toDot() << endl;
		cardTreesFile.close();
#endif

  }

#if PAPER_DEBUG == 1
  uint64_t CMin = computeCMin(elementsSum,m_K,currentValue+1); // Minimum value for remaining elements
  cout << "Sets: " << endl;

  const string SETS_FILENAME("/home/ethan/workspace/aaai14/sets.tex");
  cout << "Writing Sets to " << SETS_FILENAME << endl;
  std::ofstream setsFile(SETS_FILENAME);
  setsFile << m_cachedIE->printSets(CMin,currentValue) << endl;
  setsFile.close();
#endif

//  cout << "Card Counts: " << endl << m_cachedIE->cardinalityCountsToString();
  return currentValue;
}


size_t PIW::getSsCalls() const {
	return m_cachedIETrees->getSsCalls();
}

double PIW::getSsTime() const {
	return m_cachedIETrees->getSsTime();
}

// ===============================
// E x e c u t e   F u n c t i o n
// ===============================


uint64_t executeCIW(const PartitionProblem &problem, ProblemStats &stats, size_t numSets) {

  uint64_t upperBound = getUpperBound(problem);
//    SimpleTimer timer;
  PartitionIterativeWeakening mc(vector<uint64_t>(problem.S,problem.S+problem.N),
                          problem.sum, problem.K,upperBound, numSets);

//  cout << "Construction Time: " << timer.timeElapsed() << endl;
  uint64_t returnValue = mc.partitionFirst(problem.N, problem.sum);

  stats.firstCount = mc.getFirstCount();

  stats.ssTime = mc.getSsTime();
  stats.ssCalls = mc.getSsCalls();
  return returnValue;
}

} // End Namespace
