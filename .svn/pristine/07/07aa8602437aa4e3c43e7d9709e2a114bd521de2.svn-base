/*
 * DominanceTest.cpp
 *
 *  Created on: Jul 17, 2013
 *      Author: ethan
 */


#include "../PackingUtils.hpp"
#include "../ss/SubsetSum.hpp"
#include "../ss/completions/IECompletionGenerator.hpp"

const string FILENAME = "/home/ethan/a/2_31/10/1/problem004.np";
const int K = 5;
const uint64_t DIFF = 50000000;

int main() {
  PartitioningProblem problem(FILENAME);
  std::cout.imbue(std::locale("")); // For printing 1,000 instead of 1000

  uint64_t lowerBound = (problem.sum / K) - DIFF;
  uint64_t upperBound = (problem.sum / K) + DIFF;

  cout << "Lower Bound: " << lowerBound << endl;
  cout << "Upper Bound: " << upperBound << endl;
  {
    SimpleTimer timer;
    ss::IECompletionGenerator generator(lowerBound,upperBound,problem.S,problem.N,problem.sum,true);

    SetNode node;
    size_t count = 0;
    while (generator.next(node)) {
      if (count == 0) {
        cout << node.toString() << endl;
      }
      count++;
    }
    cout << "Count                    : " << count << " (Time: " << timer.timeElapsed() << ")" << endl;
  }

//  {
//    SimpleTimer timer;
//    vector<ss::SSSetNode> allSets;
//    ss::generateSetsIE(problem.S,problem.N,problem.sum,lowerBound,upperBound,allSets);
//    cout << "Count IE                 : " << allSets.size() << " (Time: " << timer.timeElapsed() << ")" << endl;
//    cout << allSets[0].toString(problem.S) << endl;
//  }
//
  {
    SimpleTimer timer;
    vector<ss::SSSetNode> allSets;
    ss::generateSetsIESimpleDominance(problem.S,problem.N,problem.sum,lowerBound,upperBound,allSets);
    cout << "Count IE Simple Dominance: " << allSets.size() << " (Time: " << timer.timeElapsed() << ")" << endl;
    //cout << allSets[0].toString(problem.S) << endl;
  }

//  {
//    SimpleTimer timer;
//    vector<ss::SSSetNode> allSets;
//    ss::generateSetsIEMoffittDominance(problem.S,problem.N,problem.sum,lowerBound,upperBound,allSets);
//    cout << "Count IE Moffitt         : " << allSets.size() << " (Time: " << timer.timeElapsed() << ")" << endl;
//    cout << allSets[0].toString(problem.S) << endl;
//  }
}

