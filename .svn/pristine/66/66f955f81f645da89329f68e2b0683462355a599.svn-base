import socket
  
#MYCC='clang'
#MYCXX='clang++'

MYCC='gcc'
MYCXX='g++'

STD_FLAGS      = "-O3 -g --std=c++0x -Wall" 
STD_LINK_FLAGS = "-O3 -g --std=c++0x"

#CPLEX_FLAGS   = " -O3 --std=c++0x -fomit-frame-pointer -pipe -fexceptions -DNDEBUG -DIL_STD  -mfpmath=sse"
#CPLEX_FLAGS   = " -O3 --std=c++0x  -DNDEBUG -DIL_STD  -mfpmath=sse"
CPLEX_FLAGS    = " -O3 -g --std=c++0x -pipe -fexceptions -DNDEBUG -DIL_STD  -mfpmath=sse"

CPLEX_HOME    = "/opt/ibm/ILOG/CPLEX_Studio124/"

CPLEX_INCLUDE = [ CPLEX_HOME + 'cplex/include',
                  CPLEX_HOME + 'concert/include' ]
                  
BELOV_INCLUDE = CPLEX_INCLUDE + ['./src/pack/belov_inc']
               
CPLEX_LIBPATH = ['/opt/ibm/ILOG/CPLEX_Studio124/cplex/lib/x86-64_sles10_4.1/static_pic',
                 '/opt/ibm/ILOG/CPLEX_Studio124/concert/lib/x86-64_sles10_4.1/static_pic']
CPLEX_LIBS    = ['ilocplex', 'cplex', 'concert', 'm', 'pthread',  'boost_thread-mt', 'boost_program_options-mt']

env = Environment(CC=MYCC, CXX=MYCXX,
                  CCFLAGS=STD_FLAGS,  
                  LIBS=['boost_program_options-mt', 'boost_system','boost_filesystem'],
                  LINKFLAGS=STD_LINK_FLAGS,                      
                  LIBPATH = ['/usr/lib64/'])

boost_env = Environment(CC=MYCC, CXX=MYCXX,
                          CCFLAGS=STD_FLAGS,  
                          LIBS=['boost_program_options-mt',  'boost_thread-mt'],
                          LINKFLAGS=STD_LINK_FLAGS,                      
                          LIBPATH = ['/usr/lib64/'])
              
env_belov = Environment(CC=MYCC, CXX=MYCXX,
                        CCFLAGS=CPLEX_FLAGS,
                        CPPPATH=BELOV_INCLUDE,                        
                        LIBS=CPLEX_LIBS,                        
                        LIBPATH=CPLEX_LIBPATH,
                        LINKFLAGS=STD_LINK_FLAGS)
                        
env_cplex = Environment(CC=MYCC, CXX=MYCXX,
                        CCFLAGS=CPLEX_FLAGS,
                        CPPPATH=CPLEX_INCLUDE,                        
                        LIBS=CPLEX_LIBS,                        
                        LIBPATH=CPLEX_LIBPATH,
                        LINKFLAGS=STD_LINK_FLAGS)            

vd        			= "./bin/"
vd_pack       	= vd + "pack/"
vd_utils        = vd + "utils/"
vd_ss           = vd + "ss/"
vd_ss_extended  = vd_ss + "extended/"
vd_completion 	= vd_pack + "completions/"

vd_belov      	= vd_pack + "belov/"
vd_test   			= vd + "test/"
vd_partition 		= vd + "partition/" 

VariantDir(vd,"./src",duplicate=0)
VariantDir(vd_belov,"./pack/belov/cpp",duplicate=0)

belov_source = [
  vd_belov + "bb.cpp",
  vd_belov + "bb_mos.cpp",
  vd_belov + "cutgen.cpp",
  vd_belov + "main.cpp",
  vd_belov + "probl_csp1.cpp",
  vd_belov + "probl_cp22.cpp",
  vd_belov + "probl_pmp1.cpp",
  vd_belov + "timer.cpp",
  vd_belov + "bbcuts.cpp",
  vd_belov + "mydebug.cpp",
  vd_belov + "stdafx.cpp",
  vd_belov + "bcp.cpp",
  vd_belov + "bcp_branch.cpp",
  vd_belov + "bcp_cuts.cpp",
  vd_belov + "bcp_lp.cpp",
  vd_belov + "bcpstuff.cpp",
  vd_belov + "bcp2.cpp",
  vd_belov + "wrpcpx.cpp",
  vd_belov + "mytools.cpp",
  vd_belov + "subgr.cpp",
  vd_belov + "raster.cpp",
  vd_belov + "spprc_dp.cpp",
  vd_belov + "spprc_dp1.cpp",
  vd_belov + "bkp_dp.cpp",   
  vd_belov + "ethan.cpp",
  env.Object(vd_pack + "PackingUtils.cpp"), 	
  env.Object(vd + "Utils.cpp"), 	   
  ]

subset_sum_source = [  
  env.Object(vd_ss + "SubsetSum.cpp"),
  env.Object(vd_ss + "SchroeppelShamir.cpp"),
  env.Object(vd_utils + "MemoryUsage.cpp"),
  env.Object(vd_ss + "CGA.cpp"),
  env.Object(vd_ss + "CKK.cpp"),
  env.Object(vd_ss + "KK.cpp"),  
  env.Object(vd_ss + "OrderedPowerSet.cpp"),
  env.Object(vd_ss_extended + "Extended_Schroeppel_Shamir.cpp"),
  env.Object(vd_ss_extended + "Schroeppel_Shamir_M_Subsets.cpp"),
  env.Object(vd_ss_extended + "Extended_Horowitz_Sahni.cpp"),
  env.Object(vd_ss_extended + "Horowitz_Sahni_Cardinality.cpp"),
  env.Object(vd_ss_extended + "HorowitzSahniLowCardinalityMSubsets.cpp"),
  env.Object(vd_ss_extended + "InclusionExclusion.cpp"),
  env.Object(vd_pack + "BinCompletionUtils.cpp"),
  env.Object(vd_completion + "SSCompletionGenerator.cpp"),  
  env.Object(vd_completion + "VectorCompletionGenerator.cpp"),
  env.Object(vd_completion + "IECompletionGenerator.cpp"),
  env.Object(vd_completion + "BufferedCompletionGenerator.cpp"),
  env.Object(vd_completion + "OPSCompletionGenerator.cpp")
  
]

bin_packing_source = [
  env.Object(vd_pack + "BinCompletion.cpp"),
  env.Object(vd_pack + "BinPackingTest.cpp"),
  env.Object(vd_partition + "RNP.cpp"),   
  #env.Object(vd_ss + "CGA.cpp"),     
]  + belov_source + subset_sum_source

multiway_source = [
  vd + "kPartitioningMain.cpp",
  #vd_pack + "PackingUtils.cpp",					   
  vd_partition + "PartitionUtils.cpp",		   
  vd_partition + "Moffitt.cpp",
  vd_partition + "SNP.cpp",
  vd_partition + "CachedSetsBuffered.cpp",
  vd_partition + "Partition.cpp",
  vd_partition + "PartitionIterativeWeakening.cpp",
  vd_partition + "PartitionIterativeWeakeningLowCardinality.cpp",
  vd_partition + "CachedIETrees.cpp",
  vd_partition + "GenerateIEBitset.cpp",
  vd_partition + "GenerateCachedIECardinality.cpp",
	vd_partition + "BinarySearch.cpp",
	env.Object(vd + "MainUtils.cpp"),
]  + bin_packing_source  

partition_source = [
  	vd + "PartitioningMain.cpp",  					    
  	vd_partition + "PartitionUtils.cpp",		   
  	vd_partition + "Partition.cpp",
 	env.Object(vd_ss + "CGA.cpp"),
	env.Object(vd_ss + "CKK.cpp"),
	env.Object(vd_ss + "DPPartition.cpp"),
  	env.Object(vd_ss + "HorowitzSahni.cpp"),
  	env.Object(vd_ss + "SchroeppelShamir.cpp"),
  	env.Object(vd_utils + "MemoryUsage.cpp"),
	env.Object(vd_ss + "SubsetSum.cpp"),
	env.Object(vd_ss + "KK.cpp"),
	env.Object(vd + "Utils.cpp"),	
	env.Object(vd + "MainUtils.cpp"),
	env.Object(vd_pack + "PackingUtils.cpp"),		
]    

extended_partition_source = [
  vd + "ExtendedPartitioningMain.cpp",
  env.Object(vd_ss + "KK.cpp"),  					    
  vd_partition + "PartitionUtils.cpp",		   
  vd_partition + "Partition.cpp",
  env.Object(vd + "Utils.cpp"),
	env.Object(vd + "MainUtils.cpp"),
	env.Object(vd_pack + "PackingUtils.cpp"),
	env.Object(vd_ss + "SubsetSum.cpp"),
  env.Object(vd_ss + "SchroeppelShamir.cpp"),
  env.Object(vd_utils + "MemoryUsage.cpp"),	
  env.Object(vd_ss_extended + "Extended_Schroeppel_Shamir.cpp"),
	env.Object(vd_ss_extended + "InclusionExclusion.cpp"),	
]    

env.Program(vd + 'CreatePackingProblems'          , [vd_utils + "CreatePackingProblems.cpp"         , vd_pack + "PackingUtils.cpp", vd + "Utils.cpp"])
env.Program(vd + 'CreatePartitioningProblems'     , [vd_utils + "CreatePartitioningProblems.cpp"    , vd_pack + "PackingUtils.cpp", vd + "Utils.cpp"])
env.Program(vd + 'ProcessPackingExperiments'      , [vd_utils + "ProcessPackingExperiments.cpp"     , vd_pack + "PackingUtils.cpp", vd + "Utils.cpp"])
env.Program(vd + 'ProcessSolution'                , [vd_utils + "ProcessSolution.cpp"])
env.Program(vd + 'SubsetSum'                      , [vd + "SubsetSumMain.cpp", vd_pack + "PackingUtils.cpp", vd + "Utils.cpp"] + subset_sum_source)
#env.Program(vd + 'TestDistribution'               , [vd + "TestDistribution.cpp", vd_pack + "PackingUtils.cpp", vd + "Utils.cpp"] + subset_sum_source)


env_belov.Program(vd + 'kPartitioning'            , multiway_source)
env_belov.Program(vd + 'Partitioning'            , partition_source)
env_belov.Program(vd + 'ExtendedPartitioning'     , extended_partition_source)
env_belov.Program(vd + 'BinPacking'               , [vd + "BinPackingMain.cpp"] + bin_packing_source)

