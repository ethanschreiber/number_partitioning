
import socket
  
#MYCC='clang'
#MYCXX='clang++'

MYCC='gcc'
MYCXX='g++'

STD_FLAGS     = " -O3 -g --std=c++0x -Wall" 
#STD_FLAGS     = " -g --std=c++0x -Wall" 

#CPLEX_FLAGS   = " -O3 --std=c++0x -fomit-frame-pointer -pipe -fexceptions -DNDEBUG -DIL_STD  -mfpmath=sse"
#CPLEX_FLAGS   = " -O3 --std=c++0x  -DNDEBUG -DIL_STD  -mfpmath=sse"
CPLEX_FLAGS    = " -O3 -g --std=c++0x -pipe -fexceptions -DNDEBUG -DIL_STD  -mfpmath=sse"

CPLEX_HOME    = "/opt/ibm/ILOG/CPLEX_Studio124/"

CPLEX_INCLUDE = [ CPLEX_HOME + 'cplex/include',
                  CPLEX_HOME + 'concert/include' ]
                  
BELOV_INCLUDE = CPLEX_INCLUDE + ['./src/belov_inc']
               
CPLEX_LIBPATH = ['/opt/ibm/ILOG/CPLEX_Studio124/cplex/lib/x86-64_sles10_4.1/static_pic',
                 '/opt/ibm/ILOG/CPLEX_Studio124/concert/lib/x86-64_sles10_4.1/static_pic']
CPLEX_LIBS    = ['ilocplex', 'cplex', 'concert', 'm', 'pthread',  'boost_thread-mt', 'boost_program_options-mt']

env = Environment(CC=MYCC, CXX=MYCXX,
                  CCFLAGS=STD_FLAGS,  
                  LIBS=['boost_program_options-mt', 'boost_system','boost_filesystem'],
                  LINKFLAGS='-O3',                      
                  LIBPATH = ['/usr/lib64/'])

boost_env = Environment(CC=MYCC, CXX=MYCXX,
                          CCFLAGS=STD_FLAGS,  
                          LIBS=['boost_program_options-mt',  'boost_thread-mt'],
                          LINKFLAGS='-O3',                      
                          LIBPATH = ['/usr/lib64/'])
              
env_belov = Environment(CC=MYCC, CXX=MYCXX,
                        CCFLAGS=CPLEX_FLAGS,
                        CPPPATH=BELOV_INCLUDE,                        
                        LIBS=CPLEX_LIBS,                        
                        LIBPATH=CPLEX_LIBPATH,
                        LINKFLAGS='-O3')
                        
env_cplex = Environment(CC=MYCC, CXX=MYCXX,
                        CCFLAGS=CPLEX_FLAGS,
                        CPPPATH=CPLEX_INCLUDE,                        
                        LIBS=CPLEX_LIBS,                        
                        LIBPATH=CPLEX_LIBPATH,
                        LINKFLAGS='-O3')            

vd        		= "./bin/"
vd_ss     		= vd + "ss/"
vd_completion = vd_ss + "completions/"
vd_belov      = vd + "belov/"
vd_test   		= vd + "test/"
vd_moffitt 		= vd + "moffitt/" 

VariantDir(vd,"./src",duplicate=0)
#VariantDir(vd_belov,"./belov/cpp",duplicate=0)

belov_source = [
  vd_belov + "bb.cpp",
  vd_belov + "bb_mos.cpp",
  vd_belov + "cutgen.cpp",
  vd_belov + "main.cpp",
  vd_belov + "probl_csp1.cpp",
  vd_belov + "probl_cp22.cpp",
  vd_belov + "probl_pmp1.cpp",
  vd_belov + "timer.cpp",
  vd_belov + "bbcuts.cpp",
  vd_belov + "mydebug.cpp",
  vd_belov + "stdafx.cpp",
  vd_belov + "bcp.cpp",
  vd_belov + "bcp_branch.cpp",
  vd_belov + "bcp_cuts.cpp",
  vd_belov + "bcp_lp.cpp",
  vd_belov + "bcpstuff.cpp",
  vd_belov + "bcp2.cpp",
  vd_belov + "wrpcpx.cpp",
  vd_belov + "mytools.cpp",
  vd_belov + "subgr.cpp",
  vd_belov + "raster.cpp",
  vd_belov + "spprc_dp.cpp",
  vd_belov + "spprc_dp1.cpp",
  vd_belov + "bkp_dp.cpp",   
  vd_belov + "ethan.cpp",
  env.Object(vd + "PackingUtils.cpp"), 
  ]

subset_sum_source = [  
  env.Object(vd_ss + "SubsetSum.cpp"),
  env.Object(vd_ss + "Schroeppel_Shamir.cpp"),
  env.Object(vd_ss + "Schroeppel_Shamir_Half.cpp"),
  env.Object(vd_ss + "DPMatrix.cpp"),
  env.Object(vd_ss + "DynamicProgramming.cpp"),
  env.Object(vd_ss + "Horowitz_Sahni.cpp"),
  env.Object(vd_ss + "InclusionExclusion.cpp"),
  env.Object(vd_ss + "CKK.cpp"),
  env.Object(vd_ss + "OrderedPowerSet.cpp"),
  env.Object(vd + "BinCompletionUtils.cpp"),
  env.Object(vd_completion + "SSCompletionGenerator.cpp"),  
  env.Object(vd_completion + "VectorCompletionGenerator.cpp"),
  env.Object(vd_completion + "IECompletionGenerator.cpp"),
  env.Object(vd_completion + "BufferedCompletionGenerator.cpp"),
  env.Object(vd_completion + "OPSCompletionGenerator.cpp")
]

bin_packing_source = [

  env.Object(vd + "BinCompletion.cpp"),
  env.Object(vd + "RNP.cpp"),   
  env.Object(vd_ss + "CGA.cpp"),  
    
] + belov_source + subset_sum_source

multiway_source = [
  vd + "kPartitioningMain.cpp",
  vd_moffitt + "Moffitt.cpp",
  vd_moffitt + "MoffittIE.cpp",
  vd_moffitt + "MoffittCachedIE.cpp",
  vd_moffitt + "MoffittSS.cpp",
  vd_moffitt + "MoffittRich.cpp",
   
] + bin_packing_source  

test_completion_source = [
  vd_completion + "IETest.cpp",
   
] + bin_packing_source  

env.Program(vd + 'CreatePackingProblems'          , [vd + "CreatePackingProblems.cpp"         , vd + "PackingUtils.cpp"])
env.Program(vd + 'CreatePartitioningProblems'     , [vd + "CreatePartitioningProblems.cpp"    , vd + "PackingUtils.cpp"])
env.Program(vd + 'ProcessPackingExperiments'      , [vd + "ProcessPackingExperiments.cpp"     , vd + "PackingUtils.cpp"])
env.Program(vd + 'convertTxtToBPA'                , [vd + "convertTxtToBPA.cpp"])
env.Program(vd + 'ProcessSolution'                , [vd + "ProcessSolution.cpp"])
env.Program(vd + 'SubsetSum'                      , [vd + "SubsetSumMain.cpp", vd + "PackingUtils.cpp"] + subset_sum_source)



if socket.gethostname() != "brimstone.cs.ucla.edu":
	env.Program(vd + 'ConvertPackingToPartition'    , [vd + "ConvertPackingToPartition.cpp", vd + "PackingUtils.cpp"])

env_belov.Program(vd + 'kPartitioning'            , multiway_source)
env_belov.Program(vd + 'BinPacking'               , [vd + "BinPackingMain.cpp"] + bin_packing_source)

env_cplex.Program(vd + "SetCoverCplex"            , [vd + "SetCoverCplex.cpp"])


env.Program(vd + 'testDominance'                  , [vd_test + "DominanceTest.cpp", vd + "PackingUtils.cpp"] + subset_sum_source)

#g++ -O3 -m64 -O -fPIC -fno-strict-aliasing -fexceptions -DNDEBUG -DIL_STD 
#-I/opt/ibm/ILOG/CPLEX_Studio124/cplex/include 
#-I/opt/ibm/ILOG/CPLEX_Studio124/cplex/../concert//include  
#BandwidthCplex.cpp -o BandwidthCplex 
#-L/opt/ibm/ILOG/CPLEX_Studio124/cplex/lib/x86-64_sles10_4.1/static_pic -lilocplex -lcplex 
#-L/opt/ibm/ILOG/CPLEX_Studio124/cplex/../concert//lib/x86-64_sles10_4.1/static_pic -lconcert -lm -pthread

####################
## COMMENTED OUT ###
#################### 
#env.Program(vd + 'testCKK'                       , [vd_ss + "CKK.cpp"])
#env.Program(vd + 'BinCompletion'                 , [vd + "BinPackingMain.cpp"            , vd + "BinCompletion.cpp", vd + "PackingUtils.cpp"])
#env_belov.Program(vd + 'belov_bcp'               , belov_source)
