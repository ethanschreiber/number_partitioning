/*
 * CreateProblems.cpp
 *
 *  Created on: Jul 17, 2012
 *      Author: ethan
 */

#include "PackingUtils.hpp"

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdlib>
#include <sstream>
#include <string>
#include <sys/stat.h>
#include <math.h>
#include <stdint.h>

#include "boost/random.hpp"
#include "boost/generator_iterator.hpp"

using std::cout;
using std::endl;


int main(int argc, char *argv[]) {

  if (argc != 6) {
   cout << endl << " Usage: " << argv[0] << " [# files] [# items] [seed] [# Bits] [output dir]" << endl << endl;
   exit(0);
  }

  // ------------------
  // Read in parameters
  // ------------------
  int numFiles = atoi(argv[1]);
  int numItems = atoi(argv[2]);
  unsigned int seed = atoi(argv[3]);
  int numBits = atoi(argv[4]);
  int64_t minValue = 0;
  int64_t maxValue = 1;   maxValue <<= numBits;  // maxValue = 2^numBits

  string inputDir(argv[5]);

  umask(0);               // Set the umask for mkdir to have correct permissions
  mkdir(inputDir.c_str(), 0776);  // make the directory if it does not already exist
  cout << "Writing ";

  std::ostringstream dirName;


  cout << endl
       << "# Files     : " << numFiles << endl
       << "# Items     : " << numItems << endl
       << "Min Value   : " << minValue << endl
       << "Max Value   : " << maxValue << endl << endl;

  dirName << addTrailingSlash(inputDir)
          << numItems << "items/";

  mkdir(dirName.str().c_str(),0776);


  // Setup random number generator
  typedef boost::mt19937 RNGType;
  RNGType randomGenerator;
  boost::uniform_int<int64_t> range( 1,maxValue  );
  boost::variate_generator< RNGType, boost::uniform_int<int64_t> >
                boostRandom(randomGenerator, range);
  boostRandom.engine().seed(seed);

  for (int i=0;i<numFiles;i++) {

    std::ostringstream problemName;
    std::ostringstream filename;
    problemName << "problem" << std::setfill('0') << std::setw(3) << i;
    filename << dirName.str() << problemName.str() << ".bpa";

    int64_t items[MAXN];

    int64_t sum=0;
    for (int j=0;j<numItems;j++) {
      items[j] = boostRandom();
      sum += items[j];
    }


    if (i == 1) {
      cout << " to\n";
    }
    if (i == 0 ) {
      cout << "[" << filename.str() << "]";
    } else if (i == numFiles-1) {
      cout << "        [" << filename.str() << "]";
    }

    std::ofstream outFile(filename.str().c_str());

    outFile << problemName.str() << endl
            << numItems << " " << sum << endl;

    for (int j=0;j<numItems;j++) {
      outFile << items[j] << endl;
    }

    outFile << endl;
    outFile.close();
  }
  cout << endl;
}
