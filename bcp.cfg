'Options. Delete a line and run BCP without params to restore default

[BB]: Br&Bound for Col Gen (w/o cuts)
BB.  nStepsTooMuch   1e+06  'So many backtrack steps => termination
BB.fEvenIfNotFound       0  'nStepsTooMuch backtrack steps => termination even if no good sol. found
BB.    outputLevel       0  '

[BBCuts]: Br&Bound for Col Gen with cuts
BBCuts.nStepsTooMuch   5e+06  'So many steps means there are too many cuts
BBCuts.    fCheckBnd       0  'whether the procedure should be run again w/o bound in the case no sol is found (very slow)
BBCuts.  outputLevel       0  '

[BCP]: Branch Cut Price
BCP.           TimeLimit     900  'Overall time limit
BCP.              fNoOpt       0  'Optimality is not recognized -- to test cuts etc.
BCP.            nRunsMax       1  'N trial runs with diff params, if not fLPOnly
BCP.            maxDepth  999999  'of the BCP tree
BCP.             nBFSDFS       1  'Number of nodes selected according to the standard strategy, i.e. sorted by LB levels, then by depth
BCP.               nDive       2  'm*nDive is the number of nodes selected according to DFS in the subtree of the last node, then again BFSDFS
BCP.           BrStratRL       0  'prefer nodes: 0: less left branches (xj<=), 1: more left, between: probability of '=1'.  
BCP.          fCGTailOff       0  'Quit optimizing subnode if local LPB <= UB
BCP.      fBranchPsCosts       0  'Branch on Vars, var selection: 1: pseudo-costs, 0: most fractional
BCP.             nBranch       0  '1: branching on hyperplanes (defined in Problem), 0: branching on variables
BCP.           BrVarFrac     0.5  'between 0 and 1: is the attracting fractional part for branching choice with BrOnVar; greater than 1: random choice
BCP.     dInfeasFracPart   0.001  'variable infeasibility distance from int
BCP.               Alfa1       0  'pseudo-cost (var) = Alfa1*Min(psDn,psUp) + Max(psDn,psUp)
BCP.             wTillUB       0  'Selecting most infeas var: minimize fabs(frac(lpx[i]) - 0.5) + wTillUB * (ubi - lpx[i])/(ubi-lbi)
BCP.         fRedCostBnd       0  'reduced cost bounding
BCP.        fLocalReduce       1  'Reduce RHS for col gen in nodes
BCP.            fLocalUB       1  'Set local upper bounds for all vars. Set 1 for CP22 
BCP.         nReducePool       0  '!=0: In each node, master is initialized only with parent basis
BCP.fSkipColGenAtLPBound       0  'Skip CG if LP Bnd == that in the last CPA iteration
BCP.        fUseLagrange       0  'Use Lagrange bound to stop col gen
BCP.     RNDNodeInterval      60  'Every ...th node to apply rounding heuristics.For CSP smth like 30, for PMP 10
BCP.         RNDInterval      60  'Every ...th CPA iteration to apply
BCP.      RNDColInterval      30  'Apply when N cols increases by it. Def: 30 like Vanderbeck
BCP.        MIPTimeLimit       0  '... on each RMP
BCP.     MIPNodeInterval     200  'Every ...th node to apply MIP Solver
BCP.         MIPInterval      40  'Every ...th CPA iteration to apply
BCP.    fOriginalRedCost       1  'Subgradient: take only new columns with negative _original_ reduced cost
BCP.                 M__  100000  'initial obj. coef of infeasible slacks
BCP.       fPrintProblem       1  'bool: print what we solve
BCP.      fPrintContSol0       1  'bool: print initial LP solution
BCP.   fPrintContSolBest       1  'bool: print the best (better: last) LP solution
BCP.    fPrintIntSolBest       1  'bool: print int solution
BCP.   fPrintComplicated       1  'bool: print problems unsolved after initial LP
BCP.      fCheckGivenSol       0  'Solution from solution.dat will be checked for feasibility in every node. Format: objvalue {x: i1:n1 .. ik:nk[newline]} like mine output in ...__.txt BUT NO slacks. Not with cuts yet. THE PROC is currently wrong.
BCP.         outputLevel       0  '0-5
BCP.      outputInterval       1  'If outputLevel==1, you will see only the main info each .. sec.

[BCP2]: Branch Cut Price for PMP1
BCP2.    nVarSel       3  '1-4. 1,2: closest to 1 (2: ub=0), 3,4: largest
BCP2.outputLevel       0  '0-5

[BCP_Cuts]: The Cutting Plane part of BCP
BCP_Cuts.firstCutAfterNode       0  '
BCP_Cuts.      iterRootMax      10  'Root node: IMax main CPA iterations (with col generation)
BCP_Cuts.          iterMax       3  'Subnodes: IMax main CPA iterations (with col generation)
BCP_Cuts.     kNodeNewCuts       1  'each k-th node new cuts are constructed
BCP_Cuts.          maxCuts       5  'IMax N cuts present. SET =0 IF DON'T NEED CUTS
BCP_Cuts.          cutType       1  '0: Mixed-Integer Gomory cuts by superadditive funcs
'1: Lifted CHVATAL-GOMORY cuts
BCP_Cuts.     nPoolIterMax      30  'N CPA iterations w/o adding columns
BCP_Cuts.    nCutsAddedMax      10  'N cuts added each time in each CPA subiter. Set as large as poss but so that col gen is not too long
BCP_Cuts.     nIterTailOff      15  'N CPA iter w/o bound change => 'tail off', break
BCP_Cuts.       rndViolDev   0.001  'adding cuts according to randomized violation grade,
'sort.wgt = viol * (1+(rnd-0.5)*rndViolDev)
BCP_Cuts.        CGNormMax       0  'Strengthening CG cuts: -1: mult those u with fr(ub)<1/2 by -1; 0: mult by int(1/fr(ub); k>0: mult by int n: fr(nub) = max, n<=k
BCP_Cuts.      CGFracParts       1  'Bool: take only frac parts of u's keeping the sign
BCP_Cuts.          cntDel0       1  'initial n of iterations till inactive cut del.
BCP_Cuts.       cntDel0inc     1.2  'coef. to mult. cntDel0 after cut deletion
BCP_Cuts.        delReset0      30  'After how many iterations all inactive cuts are del in spite of the non-del counter (initially). Set as large as possible but so that col gen is not too long
BCP_Cuts.      delResetInc    1.05  'increase ratio for delReset
BCP_Cuts.       fCheckCuts       0  'bool: for debugging

[CP22]: The 2D 2-Stage (=>Guillotine) Cutting Problem
CP22.fFirstCut1stD       1  'First cut along the first dimension
CP22.  fSortPieces       1
CP22. fMergePieces       1  'Bool: Merge equal piece types
CP22.  nStartBasis       2  '0: FFD (best); 1: Greedy, 2: empty.T
CP22.   nStepsMin0    4096  'Initial min N steps in B&B with cuts
CP22. nStepsMinInc    1.01  'Incr ratio (each generation)
CP22.         deps   1e-06  'eps for dual multipliers
CP22.       bb_eps   1e-06  'eps for b&b col gen
CP22.       RPEMax      10  'IMax residual problem extensions
CP22.  outputLevel       0  '0-5

[CP22_SVC]: SVC heur for the 2D CP
CP22_SVC.        iterMax      20
CP22_SVC.patternUseRatio     0.5  'Usage intensity of a new pattern rel. to max
CP22_SVC.    outputLevel       0  '0-5

[CSP1]: The 1D Cutting Stock Problem
CSP1.      fModelEquality       0  'Constraints Ax = b (take diag. start basis), otherwise Ax >= b (best)
CSP1.         fSortPieces       1
CSP1.        fMergePieces       1  'Bool: Merge equal piece types. Set =0 if fSP2Relaxation
CSP1.         fEffectiveL       0  'Bool: Set L to the largest integer combination of piece sizes not larger than initially. Care: for large L takes much mem.
CSP1.         nStartBasis       4  '0:FFD, 1: Greedy (very ok but not with many small pieces), 2: IDENTITY mattrix. 3: empty (best? But sometimes too long col gen when all items small); 4: SVC; 5: SVC+Greedy
CSP1.          nStepsMin0    8192  'Initial min N steps in B&B with cuts
CSP1.        nStepsMinInc    1.01  'Incr ratio (each generation)
CSP1.                deps   1e-06  'eps for dual multipliers
CSP1.              bb_eps   1e-06  'eps for b&b col gen (optimality test), playing with both eps maybe necessary for correct numerical result
CSP1.              RPEMax      10  'Max residual problem extensions
CSP1.           fTestMSVC       0  'Run spread/open stacks minimization SVC after main problem
CSP1.      fSP2Relaxation       0  'Relax. of 2D Strip Packing by setting b[i]=1 in col. gen.
CSP1.                 nLm       0  'Choice order between L & m in the input. =0: choose m = min(both), =1: first m, =2: first L
CSP1.        fRootPricing       0  '0: B&B, 1: Bounded DP Solver, if no Integer Bounding (fLocalUB) in the main algorithm; 2: both
CSP1.fInteractiveCapacity       0  'Interactive Capacity cuts
CSP1.            CVRPfrac     0.5  'between 0 and 1: attracting fractional part for branching choice when BrOnCVRP
CSP1.                 nHP       0  'which hyperplanes: 0 - CVRP, 1 - AFF
CSP1.    cost_perturb_max   1e-06  'product costs are -rnd(1)*value
CSP1.cost_perturb_rndinit    0.55  'initializer for rnd
CSP1.         outputLevel       0  '0-5

[CSP1_MSVC]: SVC heur for 1D MOSP
CSP1_MSVC.        iterMax     200
CSP1_MSVC. fRestrictNOpen       0  'whether to restrict N open stacks at each new pattern generation. If yes, then remove value modifiers: set m(o)sR(R)=1 and m(o)sP=0
CSP1_MSVC.NOpenMaxInitial      10  'Max. NOpen. NOTE: if a solution appears with more, then this is in the last pattern with intensity =1
CSP1_MSVC.patternUseRatio       1  'Usage intensity of a new pattern rel. to max. Setting=1 ensures that at least 1 stack closes after a pattern
CSP1_MSVC.          pow_l    1.02  'value [i] ~ pow(l[i], pow_l);
CSP1_MSVC.    weighScheme       0  'weigh new values: 0=classic, ..., 4= random
CSP1_MSVC.     nObjective       0  '0=open stacks min, 1=spread min, between:  d[i] = dd[i] * (nObjective * mSi + (1-nObjective) * mOS); (for all open types)
CSP1_MSVC.       mosReduc     0.7  'nOpenMaxTarget = nOpenMaxMin * mosReduc
CSP1_MSVC.           mosP       0  'mOS = mosR * pow(FMax(nStillOpen/nOpenMaxTarget,1),mosP);
CSP1_MSVC.         mosR__    1.02  'Initial mosR
CSP1_MSVC.          mosRR   1.001  'increase fo mosR in each new sol.
CSP1_MSVC.        msReduc     0.7  'spreadMaxTarget = spreadMaxMin * msReduc
CSP1_MSVC.            msP       0  'mSi = msR * pow(FMax(spread[i]/spreadMaxTarget,1),msP);
CSP1_MSVC.          msR__    1.02  'Initial msR
CSP1_MSVC.           msRR   1.001  'increase fo msR in each new sol.
CSP1_MSVC.        rndCMCM     1.5  ' rndCM = max(rndCMCM-1,0) * rnd +1 for each solution;  SW = ((2-2/rndCM)*rnd + 1/rndCM);
CSP1_MSVC.    outputLevel       0  '0-5

[CSP1_SVC]: SVC heur for the 1D CSP
CSP1_SVC.        iterMax      20
CSP1_SVC.patternUseRatio       1  'Usage intensity of a new pattern rel. to max
CSP1_SVC.          pow_l    1.02  'value [i] ~ pow(l[i], pow_l);
CSP1_SVC.    outputLevel       0  '0-5

[PMP1]: The 1D Pattern Minimization
PMP1.deltaKpercent       1  'Upper bound on addi stock = rndUP(dK%*cspIP).
PMP1.           pF       1  'fixed (setup) cost
PMP1.           pV       0  'variable cost (per stock sheet). NOTE: to avoid numerics, use integers
PMP1.  nStartBasis       1  '0: empty, otherwise from CSP optimum
PMP1.   CSPOutpLev       1  'outplevel when solving CSP/BPP
PMP1.     CSPTiLim      30  '
PMP1.     BPPTiLim      30  '
PMP1.    fSequence       0  'Whether to sequence soltuons for min open stacks
PMP1.      seqFreq     0.1  'probability how often to sequence a solution
PMP1.  outputLevel       0  '0-5

[Solver]: The solver framework
Solver.   problemType       1  'int: 1: CSP1, 2: CSP2, 3: CP22, 4: PMP1, 6: PMP1+MOSP1, 7: CSP1 with search for opt. L
Solver.     instFirst       1  'The 1st instance in the file is indexed by 1
Solver.      instLast  2147483647  '
Solver.   fTestParams       0  'For each of 3 branching methods, do 16 runs ...
Solver.        nTries      30  'PMP+MOSP: how many different problem separations to try
Solver.       nRounds       3  'PMP+MOSP: how many best problem separations to solve
Solver.        nParts       3  'PMP+MOSP: how many parts of a problem
Solver.splitTimeLimit      50  'PMP+MOSP: time limit for a partial problem
Solver.          maxL       0  'CSP1 with unknown L, ==0 means sum{l[i]} without b[i]
Solver.          minL       0  'CSP1 with unknown L, ==0 means max{l[i]}
Solver.   outputLevel       0  '

[Subgr]: The subgradient procedure
Subgr.iterMaxRatio    0.15  'Relative to the dimension
Subgr.     weight1       1  '0..1: the weight of the last subgr.
'The subgr of the 3 prev steps get the rest (2:1:1)
Subgr.      rhoDef    0.99  'Multiply step len by rho^k (k=step)
Subgr.   normToThe       2  'Divide subgr by its norm^normToThe; =1,2
Subgr. outputLevel       0  '

[~sys]: system parameters
~sys.   writeParams       0  'Whether all params will be re-written before execution
~sys.glbOutputLevel       0  'local will be not higher

